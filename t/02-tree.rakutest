use lib 'lib';

use Test;

use UpRooted::Schema;
use UpRooted::Table;
use UpRooted::Column;
use UpRooted::Relation;
use UpRooted::Path;

plan 4;

subtest 'path single node' => {

    plan 3;
    
    my $schema = UpRooted::Schema.new( name => 's1' );
    UpRooted::Table.new( :$schema, name => 't1' );
    
    my $path;
    lives-ok {
        $path = UpRooted::Path.new( root-table => $schema.table( 't1'), leaf-table => $schema.table( 't1') );
    }, 'Path created';
    
    is-deeply $path.relations, [], 'No Relations between root Table that is also leaf Table';
    
    is $path.order, 0, 'Order is 0 for root Table.'
};

subtest 'path without relations' => {

    plan 1;
    
    my $schema = UpRooted::Schema.new( name => 's1' );
    UpRooted::Table.new( :$schema, name => 't1' );
    UpRooted::Table.new( :$schema, name => 't2' );
    
    my $path = UpRooted::Path.new( root-table => $schema.table( 't1'), leaf-table => $schema.table( 't2') );
    
    throws-like {
        $path.relations;
    }, Exception, message => 'No Relations in Path between Table t1 and Table t2.', 'Path must have Relations between Tables.';
    
};
